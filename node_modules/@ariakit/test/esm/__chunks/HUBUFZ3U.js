"use client";
import {
  __spreadProps,
  __spreadValues
} from "./Q65FZOE2.js";

// src/query.ts
import { queries as baseQueries } from "@testing-library/dom";
var roles = [
  "alert",
  "alertdialog",
  "application",
  "article",
  "banner",
  "blockquote",
  "button",
  "caption",
  "cell",
  "checkbox",
  "code",
  "columnheader",
  "combobox",
  "complementary",
  "contentinfo",
  "definition",
  "deletion",
  "dialog",
  "directory",
  "document",
  "emphasis",
  "feed",
  "figure",
  "form",
  "generic",
  "grid",
  "gridcell",
  "group",
  "heading",
  "img",
  "insertion",
  "link",
  "list",
  "listbox",
  "listitem",
  "log",
  "main",
  "marquee",
  "math",
  "menu",
  "menubar",
  "menuitem",
  "menuitemcheckbox",
  "menuitemradio",
  "meter",
  "navigation",
  "none",
  "note",
  "option",
  "paragraph",
  "presentation",
  "progressbar",
  "radio",
  "radiogroup",
  "region",
  "row",
  "rowgroup",
  "rowheader",
  "scrollbar",
  "search",
  "searchbox",
  "separator",
  "slider",
  "spinbutton",
  "status",
  "strong",
  "subscript",
  "superscript",
  "switch",
  "tab",
  "table",
  "tablist",
  "tabpanel",
  "term",
  "textbox",
  "time",
  "timer",
  "toolbar",
  "tooltip",
  "tree",
  "treegrid",
  "treeitem"
];
var queries = Object.entries(baseQueries).reduce((queries2, [key, query2]) => {
  queries2[key] = (...args) => query2(document.body, ...args);
  return queries2;
}, {});
function matchName(name, accessibleName) {
  if (accessibleName == null)
    return false;
  if (typeof name === "string") {
    return accessibleName === name;
  }
  return name.test(accessibleName);
}
function getNameOption(name) {
  return (accessibleName, element) => {
    if (matchName(name, accessibleName))
      return true;
    if (element.getAttribute("aria-label"))
      return false;
    const labeledBy = element.getAttribute("aria-labelledby");
    if (!labeledBy) {
      const content = "placeholder" in element && element.placeholder != null ? element.placeholder : element.textContent;
      return matchName(name, content);
    }
    const label = document.getElementById(labeledBy);
    if (!(label == null ? void 0 : label.textContent))
      return false;
    return matchName(name, label.textContent);
  };
}
function createRoleQuery(role) {
  const createQuery = (query3) => {
    return (name, options) => {
      if (!name) {
        return query3(role, options);
      }
      return query3(role, __spreadValues({ name: getNameOption(name) }, options));
    };
  };
  const createIncludesHidden = (query3) => (name, options) => query3(name, __spreadValues({ hidden: true }, options));
  const query2 = createQuery(queries.queryByRole);
  const allQuery = createQuery(queries.queryAllByRole);
  const waitQuery = createQuery(queries.findByRole);
  const waitAllQuery = createQuery(queries.findAllByRole);
  const ensureQuery = createQuery(queries.getByRole);
  const ensureAllQuery = createQuery(queries.getAllByRole);
  const all = Object.assign(allQuery, {
    includesHidden: createIncludesHidden(allQuery),
    wait: Object.assign(waitAllQuery, {
      includesHidden: createIncludesHidden(waitAllQuery)
    }),
    ensure: Object.assign(ensureAllQuery, {
      includesHidden: createIncludesHidden(ensureAllQuery)
    })
  });
  const wait = Object.assign(waitQuery, {
    includesHidden: createIncludesHidden(waitQuery),
    all: Object.assign(waitAllQuery, {
      includesHidden: createIncludesHidden(waitAllQuery)
    })
  });
  const ensure = Object.assign(ensureQuery, {
    includesHidden: createIncludesHidden(ensureQuery),
    all: Object.assign(ensureAllQuery, {
      includesHidden: createIncludesHidden(ensureAllQuery)
    })
  });
  return Object.assign(query2, {
    includesHidden: createIncludesHidden(query2),
    all,
    wait,
    ensure
  });
}
function createTextQuery() {
  const all = Object.assign(queries.queryAllByText, {
    wait: queries.findAllByText,
    ensure: queries.getAllByText
  });
  const wait = Object.assign(queries.findByText, {
    all: queries.findAllByText
  });
  const ensure = Object.assign(queries.getByText, {
    all: queries.getAllByText
  });
  return Object.assign(queries.queryByText, { all, wait, ensure });
}
function createLabeledQuery() {
  const all = Object.assign(queries.queryAllByLabelText, {
    wait: queries.findAllByLabelText,
    ensure: queries.getAllByLabelText
  });
  const wait = Object.assign(queries.findByLabelText, {
    all: queries.findAllByLabelText
  });
  const ensure = Object.assign(queries.getByLabelText, {
    all: queries.getAllByLabelText
  });
  return Object.assign(queries.queryByLabelText, { all, wait, ensure });
}
var roleQueries = roles.reduce((acc, role) => {
  acc[role] = createRoleQuery(role);
  return acc;
}, {});
var query = __spreadProps(__spreadValues({}, roleQueries), {
  text: createTextQuery(),
  labeled: createLabeledQuery()
});
var q = query;

export {
  query,
  q
};
