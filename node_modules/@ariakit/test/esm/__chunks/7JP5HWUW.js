"use client";
import {
  flushMicrotasks,
  wrapAsync
} from "./LHKK7Y5F.js";

// src/dispatch.ts
import { getKeys, invariant } from "@ariakit/core/utils/misc";
import { createEvent, fireEvent } from "@testing-library/dom";
var pointerEvents = [
  "mousemove",
  "mouseover",
  "mouseenter",
  "mouseout",
  "mouseleave",
  "mousedown",
  "mouseup",
  "pointermove",
  "pointerover",
  "pointerenter",
  "pointerout",
  "pointerleave",
  "pointerdown",
  "pointerup",
  "click"
];
function baseDispatch(element, event) {
  return wrapAsync(async () => {
    invariant(element, `Unable to dispatch ${event.type} on null element`);
    const eventName = event.type.toLowerCase();
    if (pointerEvents.includes(eventName) && "classList" in element) {
      const { pointerEvents: pointerEvents2 } = getComputedStyle(element);
      if (pointerEvents2 === "none") {
        if (element.parentElement) {
          return baseDispatch(element.parentElement, event);
        }
        return true;
      }
    }
    const defaultAllowed = fireEvent(element, event);
    await flushMicrotasks();
    return defaultAllowed;
  });
}
var events = getKeys(fireEvent).reduce((events2, eventName) => {
  events2[eventName] = (element, options) => {
    invariant(element, `Unable to dispatch ${eventName} on null element`);
    const event = createEvent[eventName](element, options);
    return baseDispatch(element, event);
  };
  return events2;
}, {});
var dispatch = Object.assign(baseDispatch, events);

export {
  dispatch
};
