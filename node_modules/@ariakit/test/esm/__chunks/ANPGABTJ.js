"use client";
import {
  dispatch
} from "./7JP5HWUW.js";
import {
  sleep
} from "./YNAZUNNE.js";
import {
  wrapAsync
} from "./LHKK7Y5F.js";
import {
  __spreadProps,
  __spreadValues
} from "./Q65FZOE2.js";

// src/hover.ts
import { isVisible } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
function isPointerEventsEnabled(element) {
  return getComputedStyle(element).pointerEvents !== "none";
}
function hover(element, options) {
  return wrapAsync(async () => {
    invariant(element, "Unable to hover on null element");
    if (!isVisible(element))
      return;
    const document = element.ownerDocument;
    const { lastHovered } = document;
    const { disabled } = element;
    const pointerEventsEnabled = isPointerEventsEnabled(element);
    if (lastHovered && lastHovered !== element && isVisible(lastHovered)) {
      await dispatch.pointerMove(lastHovered, options);
      await dispatch.mouseMove(lastHovered, options);
      if (isPointerEventsEnabled(lastHovered)) {
        const isElementWithinLastHovered = lastHovered.contains(element);
        const relatedTarget = pointerEventsEnabled ? element : null;
        const leaveOptions = __spreadProps(__spreadValues({}, options), { relatedTarget });
        await dispatch.pointerOut(lastHovered, leaveOptions);
        if (!isElementWithinLastHovered) {
          await dispatch.pointerLeave(lastHovered, leaveOptions);
        }
        await dispatch.mouseOut(lastHovered, leaveOptions);
        if (!isElementWithinLastHovered) {
          await dispatch.mouseLeave(lastHovered, leaveOptions);
        }
      }
    }
    await sleep();
    if (pointerEventsEnabled) {
      const enterOptions = lastHovered ? __spreadValues({ relatedTarget: lastHovered }, options) : options;
      await dispatch.pointerOver(element, enterOptions);
      await dispatch.pointerEnter(element, enterOptions);
      if (!disabled) {
        await dispatch.mouseOver(element, enterOptions);
        await dispatch.mouseEnter(element, enterOptions);
      }
    }
    await dispatch.pointerMove(element, options);
    if (!disabled) {
      await dispatch.mouseMove(element, options);
    }
    document.lastHovered = element;
    await sleep();
  });
}

export {
  hover
};
