"use client";
import {
  blur
} from "./ZIWQZF7I.js";
import {
  focus
} from "./WAYMNUAF.js";
import {
  dispatch
} from "./7JP5HWUW.js";
import {
  wrapAsync
} from "./LHKK7Y5F.js";
import {
  __spreadValues
} from "./Q65FZOE2.js";

// src/mouse-down.ts
import { getDocument, isVisible } from "@ariakit/core/utils/dom";
import { getClosestFocusable, isFocusable } from "@ariakit/core/utils/focus";
import { invariant } from "@ariakit/core/utils/misc";
function mouseDown(element, options) {
  return wrapAsync(async () => {
    invariant(element, "Unable to mouseDown on null element");
    if (!isVisible(element))
      return;
    const { disabled } = element;
    let defaultAllowed = await dispatch.pointerDown(element, options);
    if (!disabled) {
      if (!await dispatch.mouseDown(element, __spreadValues({ detail: 1 }, options))) {
        defaultAllowed = false;
      }
    }
    if (defaultAllowed) {
      const selection = getDocument(element).getSelection();
      if (selection && selection.rangeCount) {
        const range = selection.getRangeAt(0);
        if (!range.collapsed) {
          selection.removeAllRanges();
        }
      }
      if (isFocusable(element) && getComputedStyle(element).pointerEvents !== "none") {
        await focus(element);
      } else if (element.parentElement) {
        const closestFocusable = getClosestFocusable(element.parentElement);
        if (closestFocusable) {
          await focus(closestFocusable);
        } else {
          await blur();
        }
      }
    }
  });
}

export {
  mouseDown
};
