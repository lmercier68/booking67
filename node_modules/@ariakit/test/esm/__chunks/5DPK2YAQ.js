"use client";
import {
  mouseUp
} from "./LSH2PT34.js";
import {
  mouseDown
} from "./RG2JKALK.js";
import {
  hover
} from "./ANPGABTJ.js";
import {
  focus
} from "./WAYMNUAF.js";
import {
  dispatch
} from "./7JP5HWUW.js";
import {
  sleep
} from "./YNAZUNNE.js";
import {
  wrapAsync
} from "./LHKK7Y5F.js";
import {
  __spreadValues
} from "./Q65FZOE2.js";

// src/click.ts
import { closest, isVisible } from "@ariakit/core/utils/dom";
import { isFocusable } from "@ariakit/core/utils/focus";
import { invariant } from "@ariakit/core/utils/misc";
function getClosestLabel(element) {
  if (!isFocusable(element)) {
    return closest(element, "label");
  }
  return null;
}
function getInputFromLabel(element) {
  var _a;
  const input = element.htmlFor ? (_a = element.ownerDocument) == null ? void 0 : _a.getElementById(element.htmlFor) : element.querySelector("input,textarea,select");
  return input;
}
async function clickLabel(element, options) {
  const input = getInputFromLabel(element);
  const isInputDisabled = Boolean(input == null ? void 0 : input.disabled);
  if (input) {
    input.disabled = true;
  }
  const defaultAllowed = await dispatch.click(element, options);
  if (input) {
    input.disabled = isInputDisabled;
    if (defaultAllowed && isFocusable(input)) {
      await focus(input);
      await dispatch.click(input);
    }
  }
}
function setSelected(element, selected) {
  element.setAttribute("selected", selected ? "selected" : "");
  element.selected = selected;
}
async function clickOption(element, eventOptions) {
  const select = closest(element, "select");
  if (!select) {
    await dispatch.click(element, eventOptions);
    return;
  }
  if (select.multiple) {
    const options = Array.from(select.options);
    const resetOptions = () => options.forEach((option) => {
      setSelected(option, false);
    });
    const selectRange = (a, b) => {
      const from = Math.min(a, b);
      const to = Math.max(a, b) + 1;
      const selectedOptions = options.slice(from, to);
      selectedOptions.forEach((option) => {
        setSelected(option, true);
      });
    };
    if (eventOptions == null ? void 0 : eventOptions.shiftKey) {
      const elementIndex = options.indexOf(element);
      const referenceOption = select.lastOptionSelectedNotByShiftKey;
      const referenceOptionIndex = referenceOption ? options.indexOf(referenceOption) : -1;
      resetOptions();
      selectRange(elementIndex, referenceOptionIndex);
      setSelected(element, true);
    } else {
      select.lastOptionSelectedNotByShiftKey = element;
      if (eventOptions == null ? void 0 : eventOptions.ctrlKey) {
        setSelected(element, !element.selected);
      } else {
        resetOptions();
        setSelected(element, true);
      }
    }
  } else {
    setSelected(element, true);
  }
  await dispatch.input(select);
  await dispatch.change(select);
  await dispatch.click(element, eventOptions);
}
function click(element, options, tap = false) {
  return wrapAsync(async () => {
    invariant(element, "Unable to click on null element");
    if (!isVisible(element))
      return;
    await hover(element, options);
    await mouseDown(element, options);
    while (!isVisible(element)) {
      if (!element.parentElement)
        return;
      element = element.parentElement;
    }
    if (!tap) {
      await sleep();
    }
    await mouseUp(element, options);
    const { disabled } = element;
    if (disabled)
      return;
    const label = getClosestLabel(element);
    if (label) {
      await clickLabel(label, __spreadValues({ detail: 1 }, options));
    } else if (element instanceof HTMLOptionElement) {
      await clickOption(element, __spreadValues({ detail: 1 }, options));
    } else {
      await dispatch.click(element, __spreadValues({ detail: 1 }, options));
    }
    await sleep();
  });
}

export {
  click
};
