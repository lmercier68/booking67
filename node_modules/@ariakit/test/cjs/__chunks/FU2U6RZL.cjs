"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";



var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');

// src/dispatch.ts
var _misc = require('@ariakit/core/utils/misc');
var _dom = require('@testing-library/dom');
var pointerEvents = [
  "mousemove",
  "mouseover",
  "mouseenter",
  "mouseout",
  "mouseleave",
  "mousedown",
  "mouseup",
  "pointermove",
  "pointerover",
  "pointerenter",
  "pointerout",
  "pointerleave",
  "pointerdown",
  "pointerup",
  "click"
];
function baseDispatch(element, event) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    _misc.invariant.call(void 0, element, `Unable to dispatch ${event.type} on null element`);
    const eventName = event.type.toLowerCase();
    if (pointerEvents.includes(eventName) && "classList" in element) {
      const { pointerEvents: pointerEvents2 } = getComputedStyle(element);
      if (pointerEvents2 === "none") {
        if (element.parentElement) {
          return baseDispatch(element.parentElement, event);
        }
        return true;
      }
    }
    const defaultAllowed = _dom.fireEvent.call(void 0, element, event);
    await _ZMMVJ3OTcjs.flushMicrotasks.call(void 0, );
    return defaultAllowed;
  });
}
var events = _misc.getKeys.call(void 0, _dom.fireEvent).reduce((events2, eventName) => {
  events2[eventName] = (element, options) => {
    _misc.invariant.call(void 0, element, `Unable to dispatch ${eventName} on null element`);
    const event = _dom.createEvent[eventName](element, options);
    return baseDispatch(element, event);
  };
  return events2;
}, {});
var dispatch = Object.assign(baseDispatch, events);



exports.dispatch = dispatch;
