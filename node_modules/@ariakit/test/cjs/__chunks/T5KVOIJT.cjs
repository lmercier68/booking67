"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _KVNENCXTcjs = require('./KVNENCXT.cjs');


var _A5IFXY4Jcjs = require('./A5IFXY4J.cjs');


var _FU2U6RZLcjs = require('./FU2U6RZL.cjs');


var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');


var _OVN5OYWKcjs = require('./OVN5OYWK.cjs');

// src/mouse-down.ts
var _dom = require('@ariakit/core/utils/dom');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
function mouseDown(element, options) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    _misc.invariant.call(void 0, element, "Unable to mouseDown on null element");
    if (!_dom.isVisible.call(void 0, element))
      return;
    const { disabled } = element;
    let defaultAllowed = await _FU2U6RZLcjs.dispatch.pointerDown(element, options);
    if (!disabled) {
      if (!await _FU2U6RZLcjs.dispatch.mouseDown(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { detail: 1 }, options))) {
        defaultAllowed = false;
      }
    }
    if (defaultAllowed) {
      const selection = _dom.getDocument.call(void 0, element).getSelection();
      if (selection && selection.rangeCount) {
        const range = selection.getRangeAt(0);
        if (!range.collapsed) {
          selection.removeAllRanges();
        }
      }
      if (_focus.isFocusable.call(void 0, element) && getComputedStyle(element).pointerEvents !== "none") {
        await _A5IFXY4Jcjs.focus.call(void 0, element);
      } else if (element.parentElement) {
        const closestFocusable = _focus.getClosestFocusable.call(void 0, element.parentElement);
        if (closestFocusable) {
          await _A5IFXY4Jcjs.focus.call(void 0, closestFocusable);
        } else {
          await _KVNENCXTcjs.blur.call(void 0, );
        }
      }
    }
  });
}



exports.mouseDown = mouseDown;
