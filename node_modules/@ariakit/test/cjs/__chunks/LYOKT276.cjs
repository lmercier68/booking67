"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _FU2U6RZLcjs = require('./FU2U6RZL.cjs');


var _NIEATM7Rcjs = require('./NIEATM7R.cjs');


var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');



var _OVN5OYWKcjs = require('./OVN5OYWK.cjs');

// src/hover.ts
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
function isPointerEventsEnabled(element) {
  return getComputedStyle(element).pointerEvents !== "none";
}
function hover(element, options) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    _misc.invariant.call(void 0, element, "Unable to hover on null element");
    if (!_dom.isVisible.call(void 0, element))
      return;
    const document = element.ownerDocument;
    const { lastHovered } = document;
    const { disabled } = element;
    const pointerEventsEnabled = isPointerEventsEnabled(element);
    if (lastHovered && lastHovered !== element && _dom.isVisible.call(void 0, lastHovered)) {
      await _FU2U6RZLcjs.dispatch.pointerMove(lastHovered, options);
      await _FU2U6RZLcjs.dispatch.mouseMove(lastHovered, options);
      if (isPointerEventsEnabled(lastHovered)) {
        const isElementWithinLastHovered = lastHovered.contains(element);
        const relatedTarget = pointerEventsEnabled ? element : null;
        const leaveOptions = _OVN5OYWKcjs.__spreadProps.call(void 0, _OVN5OYWKcjs.__spreadValues.call(void 0, {}, options), { relatedTarget });
        await _FU2U6RZLcjs.dispatch.pointerOut(lastHovered, leaveOptions);
        if (!isElementWithinLastHovered) {
          await _FU2U6RZLcjs.dispatch.pointerLeave(lastHovered, leaveOptions);
        }
        await _FU2U6RZLcjs.dispatch.mouseOut(lastHovered, leaveOptions);
        if (!isElementWithinLastHovered) {
          await _FU2U6RZLcjs.dispatch.mouseLeave(lastHovered, leaveOptions);
        }
      }
    }
    await _NIEATM7Rcjs.sleep.call(void 0, );
    if (pointerEventsEnabled) {
      const enterOptions = lastHovered ? _OVN5OYWKcjs.__spreadValues.call(void 0, { relatedTarget: lastHovered }, options) : options;
      await _FU2U6RZLcjs.dispatch.pointerOver(element, enterOptions);
      await _FU2U6RZLcjs.dispatch.pointerEnter(element, enterOptions);
      if (!disabled) {
        await _FU2U6RZLcjs.dispatch.mouseOver(element, enterOptions);
        await _FU2U6RZLcjs.dispatch.mouseEnter(element, enterOptions);
      }
    }
    await _FU2U6RZLcjs.dispatch.pointerMove(element, options);
    if (!disabled) {
      await _FU2U6RZLcjs.dispatch.mouseMove(element, options);
    }
    document.lastHovered = element;
    await _NIEATM7Rcjs.sleep.call(void 0, );
  });
}



exports.hover = hover;
