"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _747HORQZcjs = require('./747HORQZ.cjs');


var _T5KVOIJTcjs = require('./T5KVOIJT.cjs');


var _LYOKT276cjs = require('./LYOKT276.cjs');


var _A5IFXY4Jcjs = require('./A5IFXY4J.cjs');


var _FU2U6RZLcjs = require('./FU2U6RZL.cjs');


var _NIEATM7Rcjs = require('./NIEATM7R.cjs');


var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');


var _OVN5OYWKcjs = require('./OVN5OYWK.cjs');

// src/click.ts
var _dom = require('@ariakit/core/utils/dom');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
function getClosestLabel(element) {
  if (!_focus.isFocusable.call(void 0, element)) {
    return _dom.closest.call(void 0, element, "label");
  }
  return null;
}
function getInputFromLabel(element) {
  var _a;
  const input = element.htmlFor ? (_a = element.ownerDocument) == null ? void 0 : _a.getElementById(element.htmlFor) : element.querySelector("input,textarea,select");
  return input;
}
async function clickLabel(element, options) {
  const input = getInputFromLabel(element);
  const isInputDisabled = Boolean(input == null ? void 0 : input.disabled);
  if (input) {
    input.disabled = true;
  }
  const defaultAllowed = await _FU2U6RZLcjs.dispatch.click(element, options);
  if (input) {
    input.disabled = isInputDisabled;
    if (defaultAllowed && _focus.isFocusable.call(void 0, input)) {
      await _A5IFXY4Jcjs.focus.call(void 0, input);
      await _FU2U6RZLcjs.dispatch.click(input);
    }
  }
}
function setSelected(element, selected) {
  element.setAttribute("selected", selected ? "selected" : "");
  element.selected = selected;
}
async function clickOption(element, eventOptions) {
  const select = _dom.closest.call(void 0, element, "select");
  if (!select) {
    await _FU2U6RZLcjs.dispatch.click(element, eventOptions);
    return;
  }
  if (select.multiple) {
    const options = Array.from(select.options);
    const resetOptions = () => options.forEach((option) => {
      setSelected(option, false);
    });
    const selectRange = (a, b) => {
      const from = Math.min(a, b);
      const to = Math.max(a, b) + 1;
      const selectedOptions = options.slice(from, to);
      selectedOptions.forEach((option) => {
        setSelected(option, true);
      });
    };
    if (eventOptions == null ? void 0 : eventOptions.shiftKey) {
      const elementIndex = options.indexOf(element);
      const referenceOption = select.lastOptionSelectedNotByShiftKey;
      const referenceOptionIndex = referenceOption ? options.indexOf(referenceOption) : -1;
      resetOptions();
      selectRange(elementIndex, referenceOptionIndex);
      setSelected(element, true);
    } else {
      select.lastOptionSelectedNotByShiftKey = element;
      if (eventOptions == null ? void 0 : eventOptions.ctrlKey) {
        setSelected(element, !element.selected);
      } else {
        resetOptions();
        setSelected(element, true);
      }
    }
  } else {
    setSelected(element, true);
  }
  await _FU2U6RZLcjs.dispatch.input(select);
  await _FU2U6RZLcjs.dispatch.change(select);
  await _FU2U6RZLcjs.dispatch.click(element, eventOptions);
}
function click(element, options, tap = false) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    _misc.invariant.call(void 0, element, "Unable to click on null element");
    if (!_dom.isVisible.call(void 0, element))
      return;
    await _LYOKT276cjs.hover.call(void 0, element, options);
    await _T5KVOIJTcjs.mouseDown.call(void 0, element, options);
    while (!_dom.isVisible.call(void 0, element)) {
      if (!element.parentElement)
        return;
      element = element.parentElement;
    }
    if (!tap) {
      await _NIEATM7Rcjs.sleep.call(void 0, );
    }
    await _747HORQZcjs.mouseUp.call(void 0, element, options);
    const { disabled } = element;
    if (disabled)
      return;
    const label = getClosestLabel(element);
    if (label) {
      await clickLabel(label, _OVN5OYWKcjs.__spreadValues.call(void 0, { detail: 1 }, options));
    } else if (element instanceof HTMLOptionElement) {
      await clickOption(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { detail: 1 }, options));
    } else {
      await _FU2U6RZLcjs.dispatch.click(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { detail: 1 }, options));
    }
    await _NIEATM7Rcjs.sleep.call(void 0, );
  });
}



exports.click = click;
