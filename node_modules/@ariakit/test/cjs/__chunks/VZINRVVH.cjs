"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _A5IFXY4Jcjs = require('./A5IFXY4J.cjs');


var _FU2U6RZLcjs = require('./FU2U6RZL.cjs');


var _NIEATM7Rcjs = require('./NIEATM7R.cjs');


var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');


var _OVN5OYWKcjs = require('./OVN5OYWK.cjs');

// src/type.ts
var _dom = require('@ariakit/core/utils/dom');
var _focus = require('@ariakit/core/utils/focus');
function getKeyFromChar(key) {
  if (key === "\x7F")
    return "Delete";
  if (key === "\b")
    return "Backspace";
  if (key === "\n")
    return "Enter";
  if (key === "	")
    return "Tab";
  return key;
}
function workAroundEmailInput(element) {
  const input = element;
  if (input.tagName !== "INPUT" || input.type !== "email")
    return () => {
    };
  input.type = "text";
  return () => {
    input.type = "email";
  };
}
function type(text, element, options = {}) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    var _a, _b;
    if (element == null) {
      element = document.activeElement;
    }
    if (!element)
      return;
    if (!_focus.isFocusable.call(void 0, element))
      return;
    await _A5IFXY4Jcjs.focus.call(void 0, element);
    element.dirty = true;
    const restoreEmailInput = workAroundEmailInput(element);
    for (const char of text) {
      const key = getKeyFromChar(char);
      let value = "";
      let inputType = options.isComposing ? "insertCompositionText" : "insertText";
      let defaultAllowed = await _FU2U6RZLcjs.dispatch.keyDown(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { key }, options));
      element = _dom.getActiveElement.call(void 0, element) || element;
      if (_dom.isTextField.call(void 0, element)) {
        const input = element;
        const [start, end] = [
          (_a = input.selectionStart) != null ? _a : 0,
          (_b = input.selectionEnd) != null ? _b : 0
        ];
        const collapsed = start === end;
        let nextCaretPosition = start;
        if (char === "\x7F") {
          const firstPart = input.value.slice(0, start);
          const secondPart = input.value.slice(collapsed ? end + 1 : end);
          value = `${firstPart}${secondPart}`;
          inputType = "deleteContentForward";
        } else if (char === "\b") {
          nextCaretPosition = collapsed ? Math.max(start - 1, 0) : start;
          const firstPart = input.value.slice(0, nextCaretPosition);
          const lastPart = input.value.slice(end, input.value.length);
          value = `${firstPart}${lastPart}`;
          inputType = "deleteContentBackward";
        } else {
          const firstPartEnd = options.isComposing ? start - 1 : start;
          const firstPart = input.value.slice(0, firstPartEnd);
          const lastPart = input.value.slice(end, input.value.length);
          nextCaretPosition = start + 1;
          value = `${firstPart}${char}${lastPart}`;
        }
        if (defaultAllowed && !input.readOnly) {
          if (inputType === "insertText") {
            defaultAllowed = await _FU2U6RZLcjs.dispatch.keyPress(input, _OVN5OYWKcjs.__spreadValues.call(void 0, {
              key,
              charCode: key.charCodeAt(0)
            }, options));
          }
          if (inputType === "insertCompositionText") {
            defaultAllowed = await _FU2U6RZLcjs.dispatch.compositionUpdate(input, _OVN5OYWKcjs.__spreadValues.call(void 0, {
              data: char,
              target: { value }
            }, options));
          }
          if (defaultAllowed) {
            await _FU2U6RZLcjs.dispatch.input(input, _OVN5OYWKcjs.__spreadValues.call(void 0, {
              data: char,
              target: {
                value,
                selectionStart: nextCaretPosition,
                selectionEnd: nextCaretPosition
              },
              inputType
            }, options));
            if (input.selectionStart !== nextCaretPosition) {
              input.setSelectionRange(nextCaretPosition, nextCaretPosition);
            }
          }
        }
      }
      await _NIEATM7Rcjs.sleep.call(void 0, );
      await _FU2U6RZLcjs.dispatch.keyUp(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { key }, options));
      await _NIEATM7Rcjs.sleep.call(void 0, );
    }
    restoreEmailInput();
  });
}



exports.type = type;
