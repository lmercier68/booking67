"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _747HORQZcjs = require('./747HORQZ.cjs');


var _T5KVOIJTcjs = require('./T5KVOIJT.cjs');


var _LYOKT276cjs = require('./LYOKT276.cjs');


var _FU2U6RZLcjs = require('./FU2U6RZL.cjs');


var _NIEATM7Rcjs = require('./NIEATM7R.cjs');


var _ZMMVJ3OTcjs = require('./ZMMVJ3OT.cjs');


var _OVN5OYWKcjs = require('./OVN5OYWK.cjs');

// src/select.ts
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
function select(text, element = document.body, options) {
  return _ZMMVJ3OTcjs.wrapAsync.call(void 0, async () => {
    var _a, _b;
    _misc.invariant.call(void 0, element, "Unable to select text on null element");
    if (!_dom.isVisible.call(void 0, element))
      return;
    const document2 = element.ownerDocument;
    await _LYOKT276cjs.hover.call(void 0, element, options);
    await _T5KVOIJTcjs.mouseDown.call(void 0, element, options);
    await _FU2U6RZLcjs.dispatch.call(void 0, 
      element,
      new Event("selectstart", {
        bubbles: true,
        cancelable: true,
        composed: false
      })
    );
    const startIndex = (_b = (_a = element.textContent) == null ? void 0 : _a.indexOf(text)) != null ? _b : -1;
    const selection = document2.getSelection();
    const range = document2.createRange();
    for (let i = 1; i <= text.length; i++) {
      const iterator = document2.createNodeIterator(
        element,
        NodeFilter.SHOW_TEXT
      );
      const textSlice = text.slice(0, i);
      const endIndex = startIndex + textSlice.length;
      let index = startIndex;
      let node = null;
      let charCount = 0;
      let startContainer = null;
      let startOffset = -1;
      let endContainer = null;
      let endOffset = -1;
      while (index >= 0 && index < endIndex && charCount < endIndex && (node = iterator.nextNode())) {
        const textContent = node.textContent;
        if (!textContent)
          continue;
        charCount += textContent.length;
        if (index > charCount)
          continue;
        if (!startContainer) {
          startContainer = node;
          startOffset = index - charCount + textContent.length;
        }
        endContainer = node;
        endOffset = endIndex - charCount + textContent.length;
        index++;
      }
      if (!startContainer || !endContainer)
        continue;
      await _LYOKT276cjs.hover.call(void 0, element, options);
      range.setStart(startContainer, startOffset);
      range.setEnd(endContainer, endOffset);
      selection == null ? void 0 : selection.removeAllRanges();
      selection == null ? void 0 : selection.addRange(range);
    }
    await _NIEATM7Rcjs.sleep.call(void 0, );
    await _747HORQZcjs.mouseUp.call(void 0, element, options);
    await _FU2U6RZLcjs.dispatch.click(element, _OVN5OYWKcjs.__spreadValues.call(void 0, { detail: 1 }, options));
    selection == null ? void 0 : selection.removeAllRanges();
    selection == null ? void 0 : selection.addRange(range);
    await _NIEATM7Rcjs.sleep.call(void 0, );
  });
}



exports.select = select;
