"use client";
import {
  RadioScopedContextProvider,
  useRadioProviderContext
} from "../__chunks/ZQKNDRGB.js";
import {
  useComposite
} from "../__chunks/7PHIY4AC.js";
import "../__chunks/6QXBPV75.js";
import "../__chunks/X3ATWMYX.js";
import "../__chunks/KSMDNUGB.js";
import "../__chunks/HJIEYVEO.js";
import "../__chunks/SHA3WOPI.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/LFJDOMBA.js";
import {
  useWrapElement
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/radio/radio-group.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useRadioGroup = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useRadioProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "RadioGroup must receive a `store` prop or be wrapped in a RadioProvider component."
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(RadioScopedContextProvider, { value: store, children: element }),
      [store]
    );
    props = __spreadValues({
      role: "radiogroup"
    }, props);
    props = useComposite(__spreadValues({ store }, props));
    return props;
  }
);
var RadioGroup = createComponent((props) => {
  const htmlProps = useRadioGroup(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  RadioGroup.displayName = "RadioGroup";
}
export {
  RadioGroup,
  useRadioGroup
};
