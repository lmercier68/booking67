"use client";
import {
  useButton
} from "../__chunks/5O7V7O3A.js";
import {
  useComboboxProviderContext
} from "../__chunks/H5NQMD66.js";
import "../__chunks/XVQ3TNPZ.js";
import "../__chunks/X3ATWMYX.js";
import "../__chunks/KSMDNUGB.js";
import "../__chunks/7CRP5UGO.js";
import "../__chunks/SNQAYGW2.js";
import "../__chunks/P3UIANB7.js";
import "../__chunks/HJIEYVEO.js";
import "../__chunks/SHA3WOPI.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/LFJDOMBA.js";
import {
  useEvent
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/combobox/combobox-cancel.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx, jsxs } from "react/jsx-runtime";
var children = /* @__PURE__ */ jsxs(
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    viewBox: "0 0 16 16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1pt",
    width: "1em",
    height: "1em",
    pointerEvents: "none",
    children: [
      /* @__PURE__ */ jsx("line", { x1: "5", y1: "5", x2: "11", y2: "11" }),
      /* @__PURE__ */ jsx("line", { x1: "5", y1: "11", x2: "11", y2: "5" })
    ]
  }
);
var useComboboxCancel = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxCancel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue("");
      store == null ? void 0 : store.move(null);
    });
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = __spreadProps(__spreadValues({
      children,
      "aria-label": "Clear input",
      // This aria-controls will ensure the combobox popup remains visible when
      // this element gets focused. This logic is done in the ComboboxPopover
      // component.
      "aria-controls": comboboxId
    }, props), {
      onClick
    });
    props = useButton(props);
    return props;
  }
);
var ComboboxCancel = createComponent(
  (props) => {
    const htmlProps = useComboboxCancel(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxCancel.displayName = "ComboboxCancel";
}
export {
  ComboboxCancel,
  useComboboxCancel
};
