"use client";
import {
  useMenuItem
} from "../__chunks/OXY6XIZF.js";
import "../__chunks/VVC34BID.js";
import {
  MenuItemCheckedContext,
  useMenuScopedContext
} from "../__chunks/QQ7MJHYB.js";
import {
  useRadio
} from "../__chunks/IO2C6XLJ.js";
import "../__chunks/ZQKNDRGB.js";
import "../__chunks/NDBJZBXZ.js";
import "../__chunks/CQCRBYV6.js";
import "../__chunks/XVQ3TNPZ.js";
import "../__chunks/BY5KOAGY.js";
import "../__chunks/6QXBPV75.js";
import "../__chunks/X3ATWMYX.js";
import "../__chunks/KSMDNUGB.js";
import "../__chunks/B4BLW6E7.js";
import "../__chunks/7CRP5UGO.js";
import "../__chunks/SNQAYGW2.js";
import "../__chunks/P3UIANB7.js";
import "../__chunks/HJIEYVEO.js";
import "../__chunks/SHA3WOPI.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/LFJDOMBA.js";
import "../__chunks/2ID5JPOO.js";
import {
  useInitialValue,
  useWrapElement
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/menu/menu-item-radio.tsx
import { useEffect } from "react";
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
function getValue(prevValue, value, checked) {
  if (checked === void 0)
    return prevValue;
  if (checked)
    return value;
  return prevValue;
}
var useMenuItemRadio = createHook(
  (_a) => {
    var _b = _a, {
      store,
      name,
      value,
      checked,
      onChange: onChangeProp,
      hideOnClick = false
    } = _b, props = __objRest(_b, [
      "store",
      "name",
      "value",
      "checked",
      "onChange",
      "hideOnClick"
    ]);
    const context = useMenuScopedContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "MenuItemRadio must be wrapped in a MenuList or Menu component"
    );
    const defaultChecked = useInitialValue(props.defaultChecked);
    useEffect(() => {
      store == null ? void 0 : store.setValue(name, (prevValue = false) => {
        return getValue(prevValue, value, defaultChecked);
      });
    }, [store, name, value, defaultChecked]);
    useEffect(() => {
      if (checked === void 0)
        return;
      store == null ? void 0 : store.setValue(name, (prevValue) => {
        return getValue(prevValue, value, checked);
      });
    }, [store, name, value, checked]);
    const isChecked = store.useState((state) => state.values[name] === value);
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(MenuItemCheckedContext.Provider, { value: !!isChecked, children: element }),
      [isChecked]
    );
    props = __spreadValues({
      role: "menuitemradio"
    }, props);
    props = useRadio(__spreadValues({
      name,
      value,
      checked: isChecked,
      onChange: (event) => {
        onChangeProp == null ? void 0 : onChangeProp(event);
        if (event.defaultPrevented)
          return;
        const element = event.currentTarget;
        store == null ? void 0 : store.setValue(name, (prevValue) => {
          return getValue(prevValue, value, checked != null ? checked : element.checked);
        });
      }
    }, props));
    props = useMenuItem(__spreadValues({ store, hideOnClick }, props));
    return props;
  }
);
var MenuItemRadio = createMemoComponent(
  (props) => {
    const htmlProps = useMenuItemRadio(props);
    return createElement("div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  MenuItemRadio.displayName = "MenuItemRadio";
}
export {
  MenuItemRadio,
  useMenuItemRadio
};
