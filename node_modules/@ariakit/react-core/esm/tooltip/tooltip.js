"use client";
import {
  useHovercard
} from "../__chunks/SJHIAJ6X.js";
import "../__chunks/YMV43K4F.js";
import "../__chunks/QAVVMLZP.js";
import {
  createDialogComponent
} from "../__chunks/4MXLDXAO.js";
import "../__chunks/JQ2AMQCL.js";
import "../__chunks/G5X3WBMZ.js";
import "../__chunks/YPQ27YD7.js";
import "../__chunks/6GXEOXGT.js";
import "../__chunks/TL67WVI6.js";
import "../__chunks/CU5FOQJK.js";
import "../__chunks/BULCTPRV.js";
import "../__chunks/677M2CI3.js";
import "../__chunks/MKDDWKFK.js";
import "../__chunks/72E5EPFF.js";
import "../__chunks/OOBDFMJL.js";
import "../__chunks/ZGFCAP4H.js";
import "../__chunks/X6WIMZJE.js";
import "../__chunks/3I4EOZD7.js";
import "../__chunks/QZMQZL6N.js";
import "../__chunks/UYRJLDVS.js";
import "../__chunks/5TQMQMFE.js";
import "../__chunks/LH4OUJXP.js";
import "../__chunks/7452U3HH.js";
import "../__chunks/XPF5GU3Q.js";
import "../__chunks/EAY52LAK.js";
import "../__chunks/QUBURLUM.js";
import {
  TooltipScopedContextProvider,
  useTooltipProviderContext
} from "../__chunks/N4JWG5JC.js";
import "../__chunks/B4BLW6E7.js";
import "../__chunks/7CRP5UGO.js";
import "../__chunks/SNQAYGW2.js";
import "../__chunks/P3UIANB7.js";
import "../__chunks/HJIEYVEO.js";
import "../__chunks/SHA3WOPI.js";
import "../__chunks/B6ZZAB7E.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/LFJDOMBA.js";
import "../__chunks/XWCMZCWT.js";
import "../__chunks/4ORPOXHX.js";
import "../__chunks/2ID5JPOO.js";
import {
  useWrapElement
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/tooltip/tooltip.tsx
import { contains } from "@ariakit/core/utils/dom";
import { invariant, isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useTooltip = createHook(
  (_a) => {
    var _b = _a, {
      store,
      portal = true,
      gutter = 8,
      preserveTabOrder = false,
      hideOnHoverOutside = true,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "portal",
      "gutter",
      "preserveTabOrder",
      "hideOnHoverOutside",
      "hideOnInteractOutside"
    ]);
    const context = useTooltipProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "Tooltip must receive a `store` prop or be wrapped in a TooltipProvider component."
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TooltipScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const role = store.useState(
      (state) => state.type === "description" ? "tooltip" : "none"
    );
    props = __spreadValues({ role }, props);
    props = useHovercard(__spreadProps(__spreadValues({}, props), {
      store,
      portal,
      gutter,
      preserveTabOrder,
      hideOnHoverOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnHoverOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if ("focusVisible" in anchorElement.dataset)
          return false;
        return true;
      },
      hideOnInteractOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnInteractOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if (contains(anchorElement, event.target))
          return false;
        return true;
      }
    }));
    return props;
  }
);
var Tooltip = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useTooltip(props);
    return createElement("div", htmlProps);
  }),
  useTooltipProviderContext
);
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
export {
  Tooltip,
  useTooltip
};
