"use client";
import {
  useFormField
} from "../__chunks/ZF6AA2GH.js";
import {
  useFormContext
} from "../__chunks/DPO6VSJT.js";
import "../__chunks/BY5KOAGY.js";
import "../__chunks/KSMDNUGB.js";
import {
  useFocusable
} from "../__chunks/HJIEYVEO.js";
import "../__chunks/SHA3WOPI.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/LFJDOMBA.js";
import {
  useEvent
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/form/form-input.ts
import { invariant } from "@ariakit/core/utils/misc";
var useFormInput = createHook(
  (_a) => {
    var _b = _a, { store, name: nameProp } = _b, props = __objRest(_b, ["store", "name"]);
    const context = useFormContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormInput must be wrapped in a Form component."
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = useEvent((event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue(name, event.target.value);
    });
    const value = store.useValue(name);
    props = __spreadProps(__spreadValues({
      value
    }, props), {
      onChange
    });
    props = useFocusable(props);
    props = useFormField(__spreadValues({ store, name }, props));
    return props;
  }
);
var FormInput = createMemoComponent((props) => {
  const htmlProps = useFormInput(props);
  return createElement("input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormInput.displayName = "FormInput";
}
export {
  FormInput,
  useFormInput
};
