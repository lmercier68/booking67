"use client";
import {
  useFormContext
} from "../__chunks/DPO6VSJT.js";
import {
  useCollectionItem
} from "../__chunks/BY5KOAGY.js";
import "../__chunks/KSMDNUGB.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/LFJDOMBA.js";
import {
  useId,
  useMergeRefs
} from "../__chunks/6WEF4WY5.js";
import "../__chunks/OZVWZODE.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/2SMRF6AD.js";

// src/form/form-description.ts
import { useCallback, useRef } from "react";
import { invariant } from "@ariakit/core/utils/misc";
var useFormDescription = createHook(
  (_a) => {
    var _b = _a, { store, name: nameProp, getItem: getItemProp } = _b, props = __objRest(_b, ["store", "name", "getItem"]);
    const context = useFormContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormDescription must be wrapped in a Form component."
    );
    const id = useId(props.id);
    const ref = useRef(null);
    const name = `${nameProp}`;
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), {
          id: id || item.id,
          name,
          type: "description"
        });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, name, getItemProp]
    );
    props = __spreadProps(__spreadValues({
      id
    }, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    props = useCollectionItem(__spreadProps(__spreadValues({ store }, props), { getItem }));
    return props;
  }
);
var FormDescription = createMemoComponent(
  (props) => {
    const htmlProps = useFormDescription(props);
    return createElement("div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  FormDescription.displayName = "FormDescription";
}
export {
  FormDescription,
  useFormDescription
};
