"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";



var _YRDDHZT7cjs = require('./YRDDHZT7.cjs');


var _TUYB72LLcjs = require('./TUYB72LL.cjs');


var _6MOJZWMLcjs = require('./6MOJZWML.cjs');


var _RXGXI75Ncjs = require('./RXGXI75N.cjs');




var _VKYTJKYNcjs = require('./VKYTJKYN.cjs');


var _WLJVTO7Acjs = require('./WLJVTO7A.cjs');





var _JTVNRMACcjs = require('./JTVNRMAC.cjs');




var _WYXAWBLEcjs = require('./WYXAWBLE.cjs');

// src/menu/menu-list.tsx
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
function useAriaLabelledBy(_a) {
  var _b = _a, { store } = _b, props = _WYXAWBLEcjs.__objRest.call(void 0, _b, ["store"]);
  const [id, setId] = _react.useState.call(void 0, void 0);
  const label = props["aria-label"];
  const disclosureElement = _WLJVTO7Acjs.useStoreState.call(void 0, store, "disclosureElement");
  const contentElement = _WLJVTO7Acjs.useStoreState.call(void 0, store, "contentElement");
  _react.useEffect.call(void 0, () => {
    const disclosure = disclosureElement;
    if (!disclosure)
      return;
    const menu = contentElement;
    if (!menu)
      return;
    const menuLabel = label || menu.hasAttribute("aria-label");
    if (menuLabel) {
      setId(void 0);
    } else if (disclosure.id) {
      setId(disclosure.id);
    }
  }, [label, disclosureElement, contentElement]);
  return id;
}
var useMenuList = _VKYTJKYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, alwaysVisible, composite } = _b, props = _WYXAWBLEcjs.__objRest.call(void 0, _b, ["store", "alwaysVisible", "composite"]);
    const context = _YRDDHZT7cjs.useMenuProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "MenuList must receive a `store` prop or be wrapped in a MenuProvider component."
    );
    const parentMenu = store.parent;
    const parentMenuBar = store.menubar;
    const hasParentMenu = !!parentMenu;
    const id = _JTVNRMACcjs.useId.call(void 0, props.id);
    const onKeyDownProp = props.onKeyDown;
    const dir = store.useState(
      (state) => state.placement.split("-")[0]
    );
    const orientation = store.useState(
      (state) => state.orientation === "both" ? void 0 : state.orientation
    );
    const isHorizontal = orientation !== "vertical";
    const isMenuBarHorizontal = _WLJVTO7Acjs.useStoreState.call(void 0, 
      parentMenuBar,
      (state) => !!state && state.orientation !== "vertical"
    );
    const onKeyDown = _JTVNRMACcjs.useEvent.call(void 0, (event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (hasParentMenu || parentMenuBar && !isHorizontal) {
        const hideMap = {
          ArrowRight: () => dir === "left" && !isHorizontal,
          ArrowLeft: () => dir === "right" && !isHorizontal,
          ArrowUp: () => dir === "bottom" && isHorizontal,
          ArrowDown: () => dir === "top" && isHorizontal
        };
        const action = hideMap[event.key];
        if (action == null ? void 0 : action()) {
          event.stopPropagation();
          event.preventDefault();
          return store == null ? void 0 : store.hide();
        }
      }
      if (parentMenuBar) {
        const keyMap = {
          ArrowRight: () => {
            if (!isMenuBarHorizontal)
              return;
            return parentMenuBar.next();
          },
          ArrowLeft: () => {
            if (!isMenuBarHorizontal)
              return;
            return parentMenuBar.previous();
          },
          ArrowDown: () => {
            if (isMenuBarHorizontal)
              return;
            return parentMenuBar.next();
          },
          ArrowUp: () => {
            if (isMenuBarHorizontal)
              return;
            return parentMenuBar.previous();
          }
        };
        const action = keyMap[event.key];
        const id2 = action == null ? void 0 : action();
        if (id2 !== void 0) {
          event.stopPropagation();
          event.preventDefault();
          parentMenuBar.move(id2);
        }
      }
    });
    props = _JTVNRMACcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _YRDDHZT7cjs.MenuScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const ariaLabelledBy = useAriaLabelledBy(_WYXAWBLEcjs.__spreadValues.call(void 0, { store }, props));
    const mounted = store.useState("mounted");
    const hidden = _RXGXI75Ncjs.isHidden.call(void 0, mounted, props.hidden, alwaysVisible);
    const style = hidden ? _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {}, props.style), { display: "none" }) : props.style;
    props = _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {
      id,
      "aria-labelledby": ariaLabelledBy,
      hidden
    }, props), {
      ref: _JTVNRMACcjs.useMergeRefs.call(void 0, id ? store.setContentElement : null, props.ref),
      style,
      onKeyDown
    });
    const hasCombobox = !!store.combobox;
    composite = composite != null ? composite : !hasCombobox;
    if (composite) {
      props = _WYXAWBLEcjs.__spreadValues.call(void 0, {
        role: "menu",
        "aria-orientation": orientation
      }, props);
    }
    props = _6MOJZWMLcjs.useComposite.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, { store, composite }, props));
    props = _TUYB72LLcjs.useCompositeTypeahead.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, { store, typeahead: !hasCombobox }, props));
    return props;
  }
);
var MenuList = _VKYTJKYNcjs.createComponent.call(void 0, (props) => {
  const htmlProps = useMenuList(props);
  return _VKYTJKYNcjs.createElement.call(void 0, "div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuList.displayName = "MenuList";
}




exports.useMenuList = useMenuList; exports.MenuList = MenuList;
