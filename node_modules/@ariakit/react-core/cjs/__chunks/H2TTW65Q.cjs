"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _F7HB6RYGcjs = require('./F7HB6RYG.cjs');


var _HY2NPBHWcjs = require('./HY2NPBHW.cjs');




var _RV3PHHWMcjs = require('./RV3PHHWM.cjs');




var _FQGSRSYDcjs = require('./FQGSRSYD.cjs');




var _VKYTJKYNcjs = require('./VKYTJKYN.cjs');


var _WLJVTO7Acjs = require('./WLJVTO7A.cjs');







var _JTVNRMACcjs = require('./JTVNRMAC.cjs');




var _WYXAWBLEcjs = require('./WYXAWBLE.cjs');

// src/composite/composite-item.tsx
var _react = require('react');




var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
function isEditableElement(element) {
  if (element.isContentEditable)
    return true;
  if (_dom.isTextField.call(void 0, element))
    return true;
  return element.tagName === "INPUT" && !_dom.isButton.call(void 0, element);
}
function getNextPageOffset(scrollingElement, pageUp = false) {
  const height = scrollingElement.clientHeight;
  const { top } = scrollingElement.getBoundingClientRect();
  const pageSize = Math.max(height * 0.875, height - 40) * 1.5;
  const pageOffset = pageUp ? height - pageSize + top : pageSize + top;
  if (scrollingElement.tagName === "HTML") {
    return pageOffset + scrollingElement.scrollTop;
  }
  return pageOffset;
}
function getItemOffset(itemElement, pageUp = false) {
  const { top } = itemElement.getBoundingClientRect();
  if (pageUp) {
    return top + itemElement.clientHeight;
  }
  return top;
}
function findNextPageItemId(element, store, next, pageUp = false) {
  var _a;
  if (!store)
    return;
  if (!next)
    return;
  const { renderedItems } = store.getState();
  const scrollingElement = _dom.getScrollingElement.call(void 0, element);
  if (!scrollingElement)
    return;
  const nextPageOffset = getNextPageOffset(scrollingElement, pageUp);
  let id;
  let prevDifference;
  for (let i = 0; i < renderedItems.length; i += 1) {
    const previousId = id;
    id = next(i);
    if (!id)
      break;
    if (id === previousId)
      continue;
    const itemElement = (_a = _RV3PHHWMcjs.getEnabledItem.call(void 0, store, id)) == null ? void 0 : _a.element;
    if (!itemElement)
      continue;
    const itemOffset = getItemOffset(itemElement, pageUp);
    const difference = itemOffset - nextPageOffset;
    const absDifference = Math.abs(difference);
    if (pageUp && difference <= 0 || !pageUp && difference >= 0) {
      if (prevDifference !== void 0 && prevDifference < absDifference) {
        id = previousId;
      }
      break;
    }
    prevDifference = absDifference;
  }
  return id;
}
function targetIsAnotherItem(event, store) {
  if (_events.isSelfTarget.call(void 0, event))
    return false;
  return _RV3PHHWMcjs.isItem.call(void 0, store, event.target);
}
function useRole(ref, props) {
  const roleProp = props.role;
  const [role, setRole] = _react.useState.call(void 0, roleProp);
  _JTVNRMACcjs.useSafeLayoutEffect.call(void 0, () => {
    const element = ref.current;
    if (!element)
      return;
    setRole(element.getAttribute("role") || roleProp);
  }, [roleProp]);
  return role;
}
function requiresAriaSelected(role) {
  return role === "option" || role === "treeitem";
}
function supportsAriaSelected(role) {
  if (role === "option")
    return true;
  if (role === "tab")
    return true;
  if (role === "treeitem")
    return true;
  if (role === "gridcell")
    return true;
  if (role === "row")
    return true;
  if (role === "columnheader")
    return true;
  if (role === "rowheader")
    return true;
  return false;
}
var useCompositeItem = _VKYTJKYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      rowId: rowIdProp,
      preventScrollOnKeyDown = false,
      moveOnKeyPress = true,
      getItem: getItemProp,
      "aria-setsize": ariaSetSizeProp,
      "aria-posinset": ariaPosInSetProp
    } = _b, props = _WYXAWBLEcjs.__objRest.call(void 0, _b, [
      "store",
      "rowId",
      "preventScrollOnKeyDown",
      "moveOnKeyPress",
      "getItem",
      "aria-setsize",
      "aria-posinset"
    ]);
    const context = _FQGSRSYDcjs.useCompositeContext.call(void 0, );
    store = store || context;
    const id = _JTVNRMACcjs.useId.call(void 0, props.id);
    const ref = _react.useRef.call(void 0, null);
    const row = _react.useContext.call(void 0, _FQGSRSYDcjs.CompositeRowContext);
    const rowId = _WLJVTO7Acjs.useStoreState.call(void 0, store, (state) => {
      if (rowIdProp)
        return rowIdProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.baseElement))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      return row.id;
    });
    const disabled = _misc.disabledFromProps.call(void 0, props);
    const trulyDisabled = disabled && !props.accessibleWhenDisabled;
    const getItem = _react.useCallback.call(void 0, 
      (item) => {
        const nextItem = _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {}, item), {
          id: id || item.id,
          rowId,
          disabled: !!trulyDisabled
        });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, rowId, trulyDisabled, getItemProp]
    );
    const onFocusProp = props.onFocus;
    const hasFocusedComposite = _react.useRef.call(void 0, false);
    const onFocus = _JTVNRMACcjs.useEvent.call(void 0, (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      if (_events.isPortalEvent.call(void 0, event))
        return;
      if (!id)
        return;
      if (!store)
        return;
      const { activeId, virtualFocus: virtualFocus2, baseElement: baseElement2 } = store.getState();
      if (targetIsAnotherItem(event, store))
        return;
      if (activeId !== id) {
        store.setActiveId(id);
      }
      if (!virtualFocus2)
        return;
      if (!_events.isSelfTarget.call(void 0, event))
        return;
      if (isEditableElement(event.currentTarget))
        return;
      if (!baseElement2)
        return;
      hasFocusedComposite.current = true;
      const fromComposite = event.relatedTarget === baseElement2 || _RV3PHHWMcjs.isItem.call(void 0, store, event.relatedTarget);
      if (fromComposite) {
        _RV3PHHWMcjs.focusSilently.call(void 0, baseElement2);
      } else {
        baseElement2.focus();
      }
    });
    const onBlurCaptureProp = props.onBlurCapture;
    const onBlurCapture = _JTVNRMACcjs.useEvent.call(void 0, (event) => {
      onBlurCaptureProp == null ? void 0 : onBlurCaptureProp(event);
      if (event.defaultPrevented)
        return;
      const state = store == null ? void 0 : store.getState();
      if ((state == null ? void 0 : state.virtualFocus) && hasFocusedComposite.current) {
        hasFocusedComposite.current = false;
        event.preventDefault();
        event.stopPropagation();
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const preventScrollOnKeyDownProp = _JTVNRMACcjs.useBooleanEvent.call(void 0, preventScrollOnKeyDown);
    const moveOnKeyPressProp = _JTVNRMACcjs.useBooleanEvent.call(void 0, moveOnKeyPress);
    const onKeyDown = _JTVNRMACcjs.useEvent.call(void 0, (event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (!_events.isSelfTarget.call(void 0, event))
        return;
      if (!store)
        return;
      const { currentTarget } = event;
      const state = store.getState();
      const item = store.item(id);
      const isGrid = !!(item == null ? void 0 : item.rowId);
      const isVertical = state.orientation !== "horizontal";
      const isHorizontal = state.orientation !== "vertical";
      const keyMap = {
        ArrowUp: (isGrid || isVertical) && store.up,
        ArrowRight: (isGrid || isHorizontal) && store.next,
        ArrowDown: (isGrid || isVertical) && store.down,
        ArrowLeft: (isGrid || isHorizontal) && store.previous,
        Home: () => {
          if (!isGrid || event.ctrlKey) {
            return store == null ? void 0 : store.first();
          }
          return store == null ? void 0 : store.previous(-1);
        },
        End: () => {
          if (!isGrid || event.ctrlKey) {
            return store == null ? void 0 : store.last();
          }
          return store == null ? void 0 : store.next(-1);
        },
        PageUp: () => {
          return findNextPageItemId(currentTarget, store, store == null ? void 0 : store.up, true);
        },
        PageDown: () => {
          return findNextPageItemId(currentTarget, store, store == null ? void 0 : store.down);
        }
      };
      const action = keyMap[event.key];
      if (action) {
        const nextId = action();
        if (preventScrollOnKeyDownProp(event) || nextId !== void 0) {
          if (!moveOnKeyPressProp(event))
            return;
          event.preventDefault();
          store.move(nextId);
        }
      }
    });
    const baseElement = _WLJVTO7Acjs.useStoreState.call(void 0, 
      store,
      (state) => (state == null ? void 0 : state.baseElement) || void 0
    );
    const providerValue = _react.useMemo.call(void 0, 
      () => ({ id, baseElement }),
      [id, baseElement]
    );
    props = _JTVNRMACcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _FQGSRSYDcjs.CompositeItemContext.Provider, { value: providerValue, children: element }),
      [providerValue]
    );
    const isActiveItem = _WLJVTO7Acjs.useStoreState.call(void 0, 
      store,
      (state) => !!state && state.activeId === id
    );
    const virtualFocus = _WLJVTO7Acjs.useStoreState.call(void 0, store, "virtualFocus");
    const role = useRole(ref, props);
    let ariaSelected;
    if (isActiveItem) {
      if (requiresAriaSelected(role)) {
        ariaSelected = true;
      } else if (virtualFocus && supportsAriaSelected(role)) {
        ariaSelected = true;
      }
    }
    const ariaSetSize = _WLJVTO7Acjs.useStoreState.call(void 0, store, (state) => {
      if (ariaSetSizeProp != null)
        return ariaSetSizeProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.ariaSetSize))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      return row.ariaSetSize;
    });
    const ariaPosInSet = _WLJVTO7Acjs.useStoreState.call(void 0, store, (state) => {
      if (ariaPosInSetProp != null)
        return ariaPosInSetProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.ariaPosInSet))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      const itemsInRow = state.renderedItems.filter(
        (item) => item.rowId === rowId
      );
      return row.ariaPosInSet + itemsInRow.findIndex((item) => item.id === id);
    });
    const isTabbable = _WLJVTO7Acjs.useStoreState.call(void 0, store, (state) => {
      if (!(state == null ? void 0 : state.renderedItems.length))
        return true;
      return !state.virtualFocus && state.activeId === id;
    });
    props = _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {
      id,
      "aria-selected": ariaSelected,
      "data-active-item": isActiveItem ? "" : void 0
    }, props), {
      ref: _JTVNRMACcjs.useMergeRefs.call(void 0, ref, props.ref),
      tabIndex: isTabbable ? props.tabIndex : -1,
      onFocus,
      onBlurCapture,
      onKeyDown
    });
    props = _F7HB6RYGcjs.useCommand.call(void 0, props);
    props = _HY2NPBHWcjs.useCollectionItem.call(void 0, _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {
      store
    }, props), {
      getItem,
      shouldRegisterItem: !!id ? props.shouldRegisterItem : false
    }));
    return _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {}, props), {
      "aria-setsize": ariaSetSize,
      "aria-posinset": ariaPosInSet
    });
  }
);
var CompositeItem = _VKYTJKYNcjs.createMemoComponent.call(void 0, 
  (props) => {
    const htmlProps = useCompositeItem(props);
    return _VKYTJKYNcjs.createElement.call(void 0, "button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  CompositeItem.displayName = "CompositeItem";
}




exports.useCompositeItem = useCompositeItem; exports.CompositeItem = CompositeItem;
