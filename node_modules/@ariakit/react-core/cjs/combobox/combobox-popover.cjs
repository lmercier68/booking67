"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _F55FAJ6Acjs = require('../__chunks/F55FAJ6A.cjs');


var _KXLF6YSNcjs = require('../__chunks/KXLF6YSN.cjs');
require('../__chunks/FQGSRSYD.cjs');
require('../__chunks/JVORNAMD.cjs');


var _JA2O66IUcjs = require('../__chunks/JA2O66IU.cjs');


var _L5APETYYcjs = require('../__chunks/L5APETYY.cjs');
require('../__chunks/YREZ6S36.cjs');
require('../__chunks/D5XLZTLO.cjs');
require('../__chunks/DJLIJTDU.cjs');
require('../__chunks/JF225FQ5.cjs');
require('../__chunks/VV6WA3I6.cjs');
require('../__chunks/DEZWSLIM.cjs');
require('../__chunks/PZL34OVO.cjs');
require('../__chunks/6IUEXB4L.cjs');
require('../__chunks/7YLCVXZ7.cjs');
require('../__chunks/5GTNIPQ6.cjs');
require('../__chunks/7TN63K2T.cjs');
require('../__chunks/PRN5A3P4.cjs');
require('../__chunks/V24PR4PW.cjs');
require('../__chunks/POBIUXYK.cjs');
require('../__chunks/G3CEEQUP.cjs');
require('../__chunks/J3OG6T3B.cjs');
require('../__chunks/AE6TH3T4.cjs');
require('../__chunks/PG7QUWN4.cjs');
require('../__chunks/CVD2AZE2.cjs');
require('../__chunks/2BIO7R5N.cjs');
require('../__chunks/2TEJFTKY.cjs');
require('../__chunks/RXGXI75N.cjs');
require('../__chunks/KZA6P235.cjs');
require('../__chunks/QKKT6RXX.cjs');
require('../__chunks/SMKW5GKS.cjs');
require('../__chunks/7ARL6QHN.cjs');
require('../__chunks/75KXQZJX.cjs');
require('../__chunks/QCAPQDE7.cjs');




var _VKYTJKYNcjs = require('../__chunks/VKYTJKYN.cjs');
require('../__chunks/QQNI2PXZ.cjs');
require('../__chunks/4H55S5YC.cjs');
require('../__chunks/WLJVTO7A.cjs');
require('../__chunks/JTVNRMAC.cjs');
require('../__chunks/LNE2FWJO.cjs');




var _WYXAWBLEcjs = require('../__chunks/WYXAWBLE.cjs');

// src/combobox/combobox-popover.tsx
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
function isController(target, ...ids) {
  if (!target)
    return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls="${id}"]`).join(", ");
    if (!selector)
      return false;
    return _dom.matches.call(void 0, target, selector);
  }
  return false;
}
var useComboboxPopover = _VKYTJKYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      tabIndex,
      alwaysVisible,
      hideOnInteractOutside = true
    } = _b, props = _WYXAWBLEcjs.__objRest.call(void 0, _b, [
      "store",
      "tabIndex",
      "alwaysVisible",
      "hideOnInteractOutside"
    ]);
    const context = _KXLF6YSNcjs.useComboboxProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxPopover must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const baseElement = store.useState("baseElement");
    props = _F55FAJ6Acjs.useComboboxList.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, { store, alwaysVisible }, props));
    props = _JA2O66IUcjs.usePopover.call(void 0, _WYXAWBLEcjs.__spreadProps.call(void 0, _WYXAWBLEcjs.__spreadValues.call(void 0, {
      store,
      alwaysVisible,
      autoFocusOnShow: false,
      autoFocusOnHide: false,
      finalFocus: baseElement
    }, props), {
      // Combobox popovers can't be modal because the focus may be (and is by
      // default) outside of it on the combobox input element.
      modal: false,
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside: (event) => {
        var _a2, _b2;
        const state = store == null ? void 0 : store.getState();
        const contentId = (_a2 = state == null ? void 0 : state.contentElement) == null ? void 0 : _a2.id;
        const baseId = (_b2 = state == null ? void 0 : state.baseElement) == null ? void 0 : _b2.id;
        if (isController(event.target, contentId, baseId))
          return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = _L5APETYYcjs.createDialogComponent.call(void 0, 
  _VKYTJKYNcjs.createComponent.call(void 0, (props) => {
    const htmlProps = useComboboxPopover(props);
    return _VKYTJKYNcjs.createElement.call(void 0, "div", htmlProps);
  }),
  _KXLF6YSNcjs.useComboboxProviderContext
);
if (process.env.NODE_ENV !== "production") {
  ComboboxPopover.displayName = "ComboboxPopover";
}



exports.ComboboxPopover = ComboboxPopover; exports.useComboboxPopover = useComboboxPopover;
