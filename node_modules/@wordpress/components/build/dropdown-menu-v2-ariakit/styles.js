"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubmenuChevronIcon = exports.ItemSuffixWrapper = exports.ItemPrefixWrapper = exports.DropdownMenuSeparator = exports.DropdownMenuRadioItem = exports.DropdownMenuItem = exports.DropdownMenuGroupLabel = exports.DropdownMenuGroup = exports.DropdownMenuCheckboxItem = exports.DropdownMenu = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _react2 = require("@emotion/react");
var _utils = require("../utils");
var _space = require("../utils/space");
var _icon = _interopRequireDefault(require("../icon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */

const ANIMATION_PARAMS = {
  SLIDE_AMOUNT: '2px',
  DURATION: '400ms',
  EASING: 'cubic-bezier( 0.16, 1, 0.3, 1 )'
};
const CONTENT_WRAPPER_PADDING = (0, _space.space)(2);
const ITEM_PREFIX_WIDTH = (0, _space.space)(7);
const ITEM_PADDING_INLINE_START = (0, _space.space)(2);
const ITEM_PADDING_INLINE_END = (0, _space.space)(2.5);

// TODO: should bring this into the config, and make themeable
const DEFAULT_BORDER_COLOR = _utils.COLORS.ui.borderDisabled;
const TOOLBAR_VARIANT_BORDER_COLOR = _utils.COLORS.gray['900'];
const DEFAULT_BOX_SHADOW = `0 0 0 ${_utils.CONFIG.borderWidth} ${DEFAULT_BORDER_COLOR}, ${_utils.CONFIG.popoverShadow}`;
const TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${_utils.CONFIG.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
const slideUpAndFade = (0, _react2.keyframes)({
  '0%': {
    opacity: 0,
    transform: `translateY(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
const slideRightAndFade = (0, _react2.keyframes)({
  '0%': {
    opacity: 0,
    transform: `translateX(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateX(0)'
  }
});
const slideDownAndFade = (0, _react2.keyframes)({
  '0%': {
    opacity: 0,
    transform: `translateY(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
const slideLeftAndFade = (0, _react2.keyframes)({
  '0%': {
    opacity: 0,
    transform: `translateX(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateX(0)'
  }
});
const DropdownMenu = ( /*#__PURE__*/0, _base.default)(Ariakit.Menu, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z9"
} : {
  target: "e12mdn2z9",
  label: "DropdownMenu"
})("position:relative;z-index:1000000;min-width:220px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";background-color:", _utils.COLORS.ui.background, ";border-radius:", _utils.CONFIG.radiusBlockUi, ";", props => /*#__PURE__*/(0, _react2.css)("box-shadow:", props.variant === 'toolbar' ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownMenu;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;animation-duration:", ANIMATION_PARAMS.DURATION, ";animation-timing-function:", ANIMATION_PARAMS.EASING, ";will-change:transform,opacity;animation-name:", slideDownAndFade, ";&[data-side='right']{animation-name:", slideLeftAndFade, ";}&[data-side='bottom']{animation-name:", slideUpAndFade, ";}&[data-side='left']{animation-name:", slideRightAndFade, ";}@media ( prefers-reduced-motion ){animation-duration:0s;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownMenu = DropdownMenu;
const itemPrefix = /*#__PURE__*/(0, _react2.css)("width:", ITEM_PREFIX_WIDTH, "!important;height:auto!important;display:inline-flex;align-items:center;justify-content:center;margin-inline-start:calc( -1 * ", ITEM_PADDING_INLINE_START, " );margin-top:", (0, _space.space)(-2), ";margin-bottom:", (0, _space.space)(-2), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:itemPrefix;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const itemSuffix = /*#__PURE__*/(0, _react2.css)("width:max-content;display:inline-flex;align-items:center;justify-content:center;margin-inline-start:auto;padding-inline-start:", (0, _space.space)(6), ";margin-top:", (0, _space.space)(-2), ";margin-bottom:", (0, _space.space)(-2), ";opacity:0.6;[data-active-item]>&,[aria-expanded='true']>&,[aria-disabled='true']>&{opacity:1;}" + (process.env.NODE_ENV === "production" ? "" : ";label:itemSuffix;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const ItemPrefixWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z8"
} : {
  target: "e12mdn2z8",
  label: "ItemPrefixWrapper"
})(itemPrefix, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ItemPrefixWrapper = ItemPrefixWrapper;
const ItemSuffixWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z7"
} : {
  target: "e12mdn2z7",
  label: "ItemSuffixWrapper"
})(itemSuffix, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ItemSuffixWrapper = ItemSuffixWrapper;
const baseItem = /*#__PURE__*/(0, _react2.css)("all:unset;font-size:", (0, _utils.font)('default.fontSize'), ";font-family:inherit;font-weight:normal;line-height:20px;color:", _utils.COLORS.gray[900], ";border-radius:", _utils.CONFIG.radiusBlockUi, ";display:flex;align-items:center;padding:", (0, _space.space)(2), " ", ITEM_PADDING_INLINE_END, " ", (0, _space.space)(2), " ", ITEM_PADDING_INLINE_START, ";position:relative;user-select:none;outline:none;&[aria-disabled='true']{opacity:0.5;pointer-events:none;}&[data-active-item]{background-color:", _utils.COLORS.gray['100'], ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px var( --wp-admin-theme-color );outline:2px solid transparent;}&:active,&[data-active]{}", DropdownMenu, ":not(:focus) &:not(:focus)[aria-expanded=\"true\"]{}svg{fill:currentColor;}&:not( :has( ", ItemPrefixWrapper, " ) ){padding-inline-start:", ITEM_PREFIX_WIDTH, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:baseItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const DropdownMenuItem = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuItem, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z6"
} : {
  target: "e12mdn2z6",
  label: "DropdownMenuItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi1hcmlha2l0L3N0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4TzBEIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi1hcmlha2l0L3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmltcG9ydCAqIGFzIEFyaWFraXQgZnJvbSAnQGFyaWFraXQvcmVhY3QnO1xuaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgZm9udCwgcnRsLCBDT05GSUcgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xuaW1wb3J0IHR5cGUgeyBEcm9wZG93bk1lbnVDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IEFOSU1BVElPTl9QQVJBTVMgPSB7XG5cdFNMSURFX0FNT1VOVDogJzJweCcsXG5cdERVUkFUSU9OOiAnNDAwbXMnLFxuXHRFQVNJTkc6ICdjdWJpYy1iZXppZXIoIDAuMTYsIDEsIDAuMywgMSApJyxcbn07XG5cbmNvbnN0IENPTlRFTlRfV1JBUFBFUl9QQURESU5HID0gc3BhY2UoIDIgKTtcbmNvbnN0IElURU1fUFJFRklYX1dJRFRIID0gc3BhY2UoIDcgKTtcbmNvbnN0IElURU1fUEFERElOR19JTkxJTkVfU1RBUlQgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORV9FTkQgPSBzcGFjZSggMi41ICk7XG5cbi8vIFRPRE86IHNob3VsZCBicmluZyB0aGlzIGludG8gdGhlIGNvbmZpZywgYW5kIG1ha2UgdGhlbWVhYmxlXG5jb25zdCBERUZBVUxUX0JPUkRFUl9DT0xPUiA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IHNsaWRlVXBBbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHsgQU5JTUFUSU9OX1BBUkFNUy5TTElERV9BTU9VTlQgfSlgLFxuXHR9LFxuXHQnMTAwJSc6IHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScgfSxcbn0gKTtcblxuY29uc3Qgc2xpZGVSaWdodEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgtJHsgQU5JTUFUSU9OX1BBUkFNUy5TTElERV9BTU9VTlQgfSlgLFxuXHR9LFxuXHQnMTAwJSc6IHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScgfSxcbn0gKTtcblxuY29uc3Qgc2xpZGVEb3duQW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZUxlZnRBbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHsgQU5JTUFUSU9OX1BBUkFNUy5TTElERV9BTU9VTlQgfSlgLFxuXHR9LFxuXHQnMTAwJSc6IHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScgfSxcbn0gKTtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudSA9IHN0eWxlZCggQXJpYWtpdC5NZW51ICk8XG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XG4+YFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdC8qIFNhbWUgYXMgcG9wb3ZlciBjb21wb25lbnQgKi9cblx0LyogVE9ETzogaXMgdGhlcmUgYSB3YXkgdG8gcmVhZCB0aGUgc2FzcyB2YXJpYWJsZT8gKi9cblx0ei1pbmRleDogMTAwMDAwMDtcblxuXHRtaW4td2lkdGg6IDIyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Jsb2NrVWkgfTtcblx0JHsgKCBwcm9wcyApID0+IGNzc2Bcblx0XHRib3gtc2hhZG93OiAkeyBwcm9wcy52YXJpYW50ID09PSAndG9vbGJhcidcblx0XHRcdD8gVE9PTEJBUl9WQVJJQU5UX0JPWF9TSEFET1dcblx0XHRcdDogREVGQVVMVF9CT1hfU0hBRE9XIH07XG5cdGAgfVxuXG5cdG92ZXJzY3JvbGwtYmVoYXZpb3I6IGNvbnRhaW47XG5cdG92ZXJmbG93OiBhdXRvO1xuXG5cdC8qIE9ubHkgdmlzaWJsZSBpbiBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZSAqL1xuXHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcblxuXHQvKiBBbmltYXRpb24gKi9cblx0YW5pbWF0aW9uLWR1cmF0aW9uOiAkeyBBTklNQVRJT05fUEFSQU1TLkRVUkFUSU9OIH07XG5cdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRUFTSU5HIH07XG5cdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG5cdC8qIERlZmF1bHQgYW5pbWF0aW9uLiovXG5cdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZURvd25BbmRGYWRlIH07XG5cblx0JltkYXRhLXNpZGU9J3JpZ2h0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZUxlZnRBbmRGYWRlIH07XG5cdH1cblx0JltkYXRhLXNpZGU9J2JvdHRvbSddIHtcblx0XHRhbmltYXRpb24tbmFtZTogJHsgc2xpZGVVcEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nbGVmdCddIHtcblx0XHRhbmltYXRpb24tbmFtZTogJHsgc2xpZGVSaWdodEFuZEZhZGUgfTtcblx0fVxuXHRAbWVkaWEgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uICkge1xuXHRcdGFuaW1hdGlvbi1kdXJhdGlvbjogMHM7XG5cdH1cbmA7XG5cbmNvbnN0IGl0ZW1QcmVmaXggPSBjc3NgXG5cdC8qICFpbXBvcnRhbnQgaXMgdG8gb3ZlcnJpZGUgc29tZSBpbmxpbmUgc3R5bGVzIHNldCBieSBBcmlha2l0ICovXG5cdHdpZHRoOiAkeyBJVEVNX1BSRUZJWF9XSURUSCB9ICFpbXBvcnRhbnQ7XG5cdC8qICFpbXBvcnRhbnQgaXMgdG8gb3ZlcnJpZGUgc29tZSBpbmxpbmUgc3R5bGVzIHNldCBieSBBcmlha2l0ICovXG5cdGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuXHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdC8qIFByZWZpeGVzIGRvbid0IGdldCBhZmZlY3RlZCBieSB0aGUgaXRlbSdzIGlubGluZSBzdGFydCBwYWRkaW5nICovXG5cdG1hcmdpbi1pbmxpbmUtc3RhcnQ6IGNhbGMoIC0xICogJHsgSVRFTV9QQURESU5HX0lOTElORV9TVEFSVCB9ICk7XG5cdC8qXG5cdFx0TmVnYXRpdmUgbWFyZ2luIGFsbG93cyB0aGUgc3VmZml4IHRvIGJlIGFzIHRhbGwgYXMgdGhlIHdob2xlIGl0ZW1cblx0XHQoaW5jbC4gcGFkZGluZykgYmVmb3JlIGluY3JlYXNpbmcgdGhlIGl0ZW1zJyBoZWlnaHQuIFRoaXMgY2FuIGJlIHVzZWZ1bCxcblx0XHRlLmcuLCB3aGVuIHVzaW5nIGljb25zIHRoYXQgYXJlIGJpZ2dlciB0aGFuIDIweDIwIHB4XG5cdCovXG5cdG1hcmdpbi10b3A6ICR7IHNwYWNlKCAtMiApIH07XG5cdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCAtMiApIH07XG5gO1xuXG5jb25zdCBpdGVtU3VmZml4ID0gY3NzYFxuXHR3aWR0aDogbWF4LWNvbnRlbnQ7XG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0LyogUHVzaCBwcmVmaXggdG8gdGhlIGlubGluZS1lbmQgb2YgdGhlIGl0ZW0gKi9cblx0bWFyZ2luLWlubGluZS1zdGFydDogYXV0bztcblx0LyogTWluaW11bSBzcGFjZSBiZXR3ZWVuIHRoZSBpdGVtJ3MgY29udGVudCBhbmQgc3VmZml4ICovXG5cdHBhZGRpbmctaW5saW5lLXN0YXJ0OiAkeyBzcGFjZSggNiApIH07XG5cdC8qXG5cdFx0TmVnYXRpdmUgbWFyZ2luIGFsbG93cyB0aGUgc3VmZml4IHRvIGJlIGFzIHRhbGwgYXMgdGhlIHdob2xlIGl0ZW1cblx0XHQoaW5jbC4gcGFkZGluZykgYmVmb3JlIGluY3JlYXNpbmcgdGhlIGl0ZW1zJyBoZWlnaHQuIFRoaXMgY2FuIGJlIHVzZWZ1bCxcblx0XHRlLmcuLCB3aGVuIHVzaW5nIGljb25zIHRoYXQgYXJlIGJpZ2dlciB0aGFuIDIweDIwIHB4XG5cdCovXG5cdG1hcmdpbi10b3A6ICR7IHNwYWNlKCAtMiApIH07XG5cdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCAtMiApIH07XG5cblx0Lypcblx0XHRPdmVycmlkZSBjb2xvciBpbiBub3JtYWwgY29uZGl0aW9ucywgYnV0IGluaGVyaXQgdGhlIGl0ZW0ncyBjb2xvclxuXHQgIGZvciBhbHRlcmVkIGNvbmRpdGlvbnMuXG5cblx0XHRUT0RPOlxuXHRcdCAgLSBGb3Igbm93LCB1c2VkIG9wYWNpdHkgbGlrZSBmb3IgZGlzYWJsZWQgaXRlbSwgd2hpY2ggbWFrZXMgaXQgd29ya1xuXHRcdFx0ICByZWdhcmRsZXNzIG9mIHRoZSB0aGVtZVxuXHRcdCAgLSBob3cgZG8gd2UgdHJhbnNsYXRlIHRoaXMgZm9yIHRoZW1lcz8gU2hvdWxkIHdlIGhhdmUgYSBuZXcgdmFyaWFibGVcblx0XHRmb3IgXCJzZWNvbmRhcnlcIiB0ZXh0P1xuXHQqL1xuXHRvcGFjaXR5OiAwLjY7XG5cblx0Lyogd2hlbiB0aGUgcGFyZW50IGl0ZW0gaXMgaG92ZXJlZCAvIGZvY3VzZWQgKi9cblx0W2RhdGEtYWN0aXZlLWl0ZW1dID4gJixcblx0Lyogd2hlbiB0aGUgcGFyZW50IGl0ZW0gaXMgYSBzdWJtZW51IHRyaWdnZXIgYW5kIHRoZSBzdWJtZW51IGlzIG9wZW4gKi9cblx0W2FyaWEtZXhwYW5kZWQ9J3RydWUnXSA+ICYsXG5cdC8qIHdoZW4gdGhlIHBhcmVudCBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gPiAmIHtcblx0XHRvcGFjaXR5OiAxO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0JHsgaXRlbVByZWZpeCB9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVN1ZmZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0JHsgaXRlbVN1ZmZpeCB9XG5gO1xuXG5jb25zdCBiYXNlSXRlbSA9IGNzc2Bcblx0YWxsOiB1bnNldDtcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Jsb2NrVWkgfTtcblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0cGFkZGluZzogJHsgc3BhY2UoIDIgKSB9ICR7IElURU1fUEFERElOR19JTkxJTkVfRU5EIH0gJHsgc3BhY2UoIDIgKSB9XG5cdFx0JHsgSVRFTV9QQURESU5HX0lOTElORV9TVEFSVCB9O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuXHRvdXRsaW5lOiBub25lO1xuXG5cdCZbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddIHtcblx0XHQvKlxuXHRcdFRPRE86XG5cdFx0XHQtIHdlIG5lZWQgYSBkaXNhYmxlZCBjb2xvciBpbiB0aGUgVGhlbWUgdmFyaWFibGVzXG5cdFx0XHQtIGRlc2lnbiBzcGVjcyB1c2Ugb3BhY2l0eSBpbnN0ZWFkIG9mIHNldHRpbmcgYSBuZXcgdGV4dCBjb2xvclxuXHQqL1xuXHRcdG9wYWNpdHk6IDAuNTtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV0ge1xuXHRcdC8qIFRPRE86IHJlY29uY2lsZSB3aXRoIGdsb2JhbCBmb2N1cyBzdHlsZXMgKi9cblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgJzEwMCcgXSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggdmFyKCAtLXdwLWFkbWluLXRoZW1lLWNvbG9yICk7XG5cblx0XHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdH1cblxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xuXHQmOmFjdGl2ZSxcblx0JltkYXRhLWFjdGl2ZV0ge1xuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXG5cdH1cblxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xuXHQkeyBEcm9wZG93bk1lbnUgfTpub3QoOmZvY3VzKSAmOm5vdCg6Zm9jdXMpW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdIHtcblx0XHQvKiBUT0RPOiBzaG91bGQgd2Ugc3R5bGUgc3VibWVudSB0cmlnZ2VycyBhbnkgZGlmZmVyZW50PyAqL1xuXHR9XG5cblx0c3ZnIHtcblx0XHRmaWxsOiBjdXJyZW50Q29sb3I7XG5cdH1cblxuXHQmOm5vdCggOmhhcyggJHsgSXRlbVByZWZpeFdyYXBwZXIgfSApICkge1xuXHRcdHBhZGRpbmctaW5saW5lLXN0YXJ0OiAkeyBJVEVNX1BSRUZJWF9XSURUSCB9O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbSApYFxuXHQkeyBiYXNlSXRlbSB9XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtQ2hlY2tib3ggKWBcblx0JHsgYmFzZUl0ZW0gfVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVJhZGlvSXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbVJhZGlvIClgXG5cdCR7IGJhc2VJdGVtIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVHcm91cCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXAgKWBgO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51R3JvdXBMYWJlbCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXBMYWJlbCApYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggOCApIH07XG5cblx0cGFkZGluZzogJHsgc3BhY2UoIDIgKSB9ICR7IElURU1fUEFERElOR19JTkxJTkVfRU5EIH0gJHsgc3BhY2UoIDIgKSB9XG5cdFx0JHsgSVRFTV9QUkVGSVhfV0lEVEggfTtcblx0LyogVE9ETzogY29sb3IgZG9lc24ndCBtYXRjaCBhdmFpbGFibGUgVUkgdmFyaWFibGVzICovXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQvKiBUT0RPOiBmb250IHNpemUgZG9lc24ndCBtYXRjaCBhdmFpbGFibGUgb25lcyB2aWEgXCJmb250XCIgdXRpbHMgKi9cblx0Zm9udC1zaXplOiAxMXB4O1xuXHRsaW5lLWhlaWdodDogMS40O1xuXHRmb250LXdlaWdodDogNTAwO1xuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVNlcGFyYXRvciA9IHN0eWxlZCggQXJpYWtpdC5NZW51U2VwYXJhdG9yICk8XG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XG4+YFxuXHRib3JkZXI6IG5vbmU7XG5cdGhlaWdodDogJHsgQ09ORklHLmJvcmRlcldpZHRoIH07XG5cdC8qIFRPRE86IGRvZXNuJ3QgbWF0Y2ggYm9yZGVyIGNvbG9yIGZyb20gdmFyaWFibGVzICovXG5cdGJhY2tncm91bmQtY29sb3I6ICR7ICggcHJvcHMgKSA9PlxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SXG5cdFx0XHQ6IERFRkFVTFRfQk9SREVSX0NPTE9SIH07XG5cdC8qIE5lZ2F0aXZlIGhvcml6b250YWwgbWFyZ2luIHRvIG1ha2Ugc2VwYXJhdG9yIGdvIGZyb20gc2lkZSB0byBzaWRlICovXG5cdG1hcmdpbjogJHsgc3BhY2UoIDIgKSB9IGNhbGMoIC0xICogJHsgQ09OVEVOVF9XUkFQUEVSX1BBRERJTkcgfSApO1xuXG5cdC8qIE9ubHkgdmlzaWJsZSBpbiBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZSAqL1xuXHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VibWVudUNoZXZyb25JY29uID0gc3R5bGVkKCBJY29uIClgXG5cdCR7IHJ0bChcblx0XHR7XG5cdFx0XHR0cmFuc2Zvcm06IGBzY2FsZVgoMSkgdHJhbnNsYXRlWCgkeyBzcGFjZSggMiApIH0pYCxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSkgdHJhbnNsYXRlWCgkeyBzcGFjZSggMiApIH0pYCxcblx0XHR9XG5cdCkgfVxuYDtcbiJdfQ== */"));
exports.DropdownMenuItem = DropdownMenuItem;
const DropdownMenuCheckboxItem = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuItemCheckbox, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z5"
} : {
  target: "e12mdn2z5",
  label: "DropdownMenuCheckboxItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownMenuCheckboxItem = DropdownMenuCheckboxItem;
const DropdownMenuRadioItem = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuItemRadio, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z4"
} : {
  target: "e12mdn2z4",
  label: "DropdownMenuRadioItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownMenuRadioItem = DropdownMenuRadioItem;
const DropdownMenuGroup = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuGroup, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z3"
} : {
  target: "e12mdn2z3",
  label: "DropdownMenuGroup"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.DropdownMenuGroup = DropdownMenuGroup;
const DropdownMenuGroupLabel = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuGroupLabel, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z2"
} : {
  target: "e12mdn2z2",
  label: "DropdownMenuGroupLabel"
})("box-sizing:border-box;display:flex;align-items:center;min-height:", (0, _space.space)(8), ";padding:", (0, _space.space)(2), " ", ITEM_PADDING_INLINE_END, " ", (0, _space.space)(2), " ", ITEM_PREFIX_WIDTH, ";color:", _utils.COLORS.gray[700], ";font-size:11px;line-height:1.4;font-weight:500;text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownMenuGroupLabel = DropdownMenuGroupLabel;
const DropdownMenuSeparator = ( /*#__PURE__*/0, _base.default)(Ariakit.MenuSeparator, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z1"
} : {
  target: "e12mdn2z1",
  label: "DropdownMenuSeparator"
})("border:none;height:", _utils.CONFIG.borderWidth, ";background-color:", props => props.variant === 'toolbar' ? TOOLBAR_VARIANT_BORDER_COLOR : DEFAULT_BORDER_COLOR, ";margin:", (0, _space.space)(2), " calc( -1 * ", CONTENT_WRAPPER_PADDING, " );outline:2px solid transparent;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownMenuSeparator = DropdownMenuSeparator;
const SubmenuChevronIcon = ( /*#__PURE__*/0, _base.default)(_icon.default, process.env.NODE_ENV === "production" ? {
  target: "e12mdn2z0"
} : {
  target: "e12mdn2z0",
  label: "SubmenuChevronIcon"
})((0, _utils.rtl)({
  transform: `scaleX(1) translateX(${(0, _space.space)(2)})`
}, {
  transform: `scaleX(-1) translateX(${(0, _space.space)(2)})`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SubmenuChevronIcon = SubmenuChevronIcon;
//# sourceMappingURL=styles.js.map