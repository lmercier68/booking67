import { createElement, Fragment } from "react";
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import * as Ariakit from '@ariakit/react';

/**
 * WordPress dependencies
 */
import { forwardRef, createContext, useContext, useMemo, cloneElement, isValidElement } from '@wordpress/element';
import { isRTL } from '@wordpress/i18n';
import { check, chevronRightSmall } from '@wordpress/icons';
import { SVG, Circle } from '@wordpress/primitives';

/**
 * Internal dependencies
 */
import { useContextSystem, contextConnect } from '../context';
import Icon from '../icon';
import * as Styled from './styles';
export const DropdownMenuContext = createContext(undefined);
export const DropdownMenuItem = forwardRef(function DropdownMenuItem({
  prefix,
  suffix,
  children,
  hideOnClick = true,
  ...props
}, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuItem, {
    ref: ref,
    ...props,
    hideOnClick: hideOnClick,
    store: dropdownMenuContext?.store
  }, prefix && createElement(Styled.ItemPrefixWrapper, null, prefix), children, suffix && createElement(Styled.ItemSuffixWrapper, null, suffix));
});
export const DropdownMenuCheckboxItem = forwardRef(function DropdownMenuCheckboxItem({
  suffix,
  children,
  hideOnClick = false,
  ...props
}, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuCheckboxItem, {
    ref: ref,
    ...props,
    hideOnClick: hideOnClick,
    store: dropdownMenuContext?.store
  }, createElement(Ariakit.MenuItemCheck, {
    store: dropdownMenuContext?.store,
    render: createElement(Styled.ItemPrefixWrapper, null)
  }, createElement(Icon, {
    icon: check,
    size: 24
  })), children, suffix && createElement(Styled.ItemSuffixWrapper, null, suffix));
});
export const DropdownMenuRadioItem = forwardRef(function DropdownMenuRadioItem({
  suffix,
  children,
  hideOnClick = false,
  ...props
}, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuRadioItem, {
    ref: ref,
    ...props,
    hideOnClick: hideOnClick,
    store: dropdownMenuContext?.store
  }, createElement(Ariakit.MenuItemCheck, {
    store: dropdownMenuContext?.store,
    render: createElement(Styled.ItemPrefixWrapper, null)
  }, createElement(SVG, {
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, createElement(Circle, {
    cx: 12,
    cy: 12,
    r: 3,
    fill: "currentColor"
  }))), children, suffix);
});
export const DropdownMenuGroup = forwardRef(function DropdownMenuGroup(props, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuGroup, {
    ref: ref,
    ...props,
    store: dropdownMenuContext?.store
  });
});
export const DropdownMenuGroupLabel = forwardRef(function DropdownMenuGroupLabel(props, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuGroupLabel, {
    ref: ref,
    ...props,
    store: dropdownMenuContext?.store
  });
});
const UnconnectedDropdownMenu = (props, ref) => {
  var _props$placement, _trigger$props$suffix;
  const {
    // Store props
    open,
    defaultOpen = false,
    onOpenChange,
    placement,
    // Menu trigger props
    trigger,
    // Menu props
    gutter,
    children,
    shift,
    modal = true,
    hideOnEscape = true,
    // From internal components context
    variant,
    // Rest
    ...otherProps
  } = useContextSystem(props, 'DropdownMenu');
  const parentContext = useContext(DropdownMenuContext);
  const computedDirection = isRTL() ? 'rtl' : 'ltr';

  // If an explicit value for the `placement` prop is not passed,
  // apply a default placement of `bottom-start` for the root dropdown,
  // and of `right-start` for nested dropdowns.
  let computedPlacement = (_props$placement = props.placement) !== null && _props$placement !== void 0 ? _props$placement : parentContext?.store ? 'right-start' : 'bottom-start';
  // Swap left/right in case of RTL direction
  if (computedDirection === 'rtl') {
    if (/right/.test(computedPlacement)) {
      computedPlacement = computedPlacement.replace('right', 'left');
    } else if (/left/.test(computedPlacement)) {
      computedPlacement = computedPlacement.replace('left', 'right');
    }
  }
  const dropdownMenuStore = Ariakit.useMenuStore({
    parent: parentContext?.store,
    open,
    defaultOpen,
    placement: computedPlacement,
    focusLoop: true,
    setOpen(willBeOpen) {
      onOpenChange?.(willBeOpen);
    },
    rtl: computedDirection === 'rtl'
  });
  const contextValue = useMemo(() => ({
    store: dropdownMenuStore,
    variant
  }), [dropdownMenuStore, variant]);

  // Extract the side from the applied placement â€” useful for animations.
  const appliedPlacementSide = dropdownMenuStore.useState('placement').split('-')[0];
  if (dropdownMenuStore.parent && !(isValidElement(trigger) && DropdownMenuItem === trigger.type)) {
    // eslint-disable-next-line no-console
    console.warn('For nested DropdownMenus, the `trigger` should always be a `DropdownMenuItem`.');
  }
  return createElement(Fragment, null, createElement(Ariakit.MenuButton, {
    ref: ref,
    store: dropdownMenuStore,
    render: dropdownMenuStore.parent ? cloneElement(trigger, {
      // Add submenu arrow, unless a `suffix` is explicitly specified
      suffix: (_trigger$props$suffix = trigger.props.suffix) !== null && _trigger$props$suffix !== void 0 ? _trigger$props$suffix : createElement(Styled.SubmenuChevronIcon, {
        "aria-hidden": "true",
        icon: chevronRightSmall,
        size: 24
      })
    }) : trigger
  }), createElement(Styled.DropdownMenu, {
    ...otherProps,
    modal: modal,
    store: dropdownMenuStore,
    gutter: gutter !== null && gutter !== void 0 ? gutter : dropdownMenuStore.parent ? 16 : 8,
    shift: shift !== null && shift !== void 0 ? shift : dropdownMenuStore.parent ? -8 : 0,
    hideOnHoverOutside: false,
    "data-side": appliedPlacementSide,
    variant: variant,
    wrapperProps: {
      dir: computedDirection,
      style: {
        direction: computedDirection
      }
    },
    hideOnEscape: hideOnEscape,
    unmountOnHide: true
  }, createElement(DropdownMenuContext.Provider, {
    value: contextValue
  }, children)));
};
export const DropdownMenu = contextConnect(UnconnectedDropdownMenu, 'DropdownMenu');
export const DropdownMenuSeparator = forwardRef(function DropdownMenuSeparator(props, ref) {
  const dropdownMenuContext = useContext(DropdownMenuContext);
  return createElement(Styled.DropdownMenuSeparator, {
    ref: ref,
    ...props,
    store: dropdownMenuContext?.store,
    variant: dropdownMenuContext?.variant
  });
});
//# sourceMappingURL=index.js.map